#import bootloadercmd as b
env = Environment(PIC = '24FJ128GB206', 
                  CC = 'xc16-gcc', 
                  PROGSUFFIX = '.elf', 
                  CFLAGS = '-g -omf=elf -x c -mcpu=$PIC', 
                  LINKFLAGS = '-omf=elf -mcpu=$PIC -Wl,--script="app_p24FJ128GB206.gld"', 
                  CPPPATH = '../lib')
env.PrependENVPath('PATH', '/opt/microchip/xc16/v1.33/bin')
bin2hex = Builder(action = 'xc16-bin2hex $SOURCE -omf=elf',
                  suffix = 'hex', 
                  src_suffix = 'elf')
env.Append(BUILDERS = {'Hex' : bin2hex})
list = Builder(action = 'xc16-objdump -S -D $SOURCE > $TARGET', 
               suffix = 'lst', 
               src_suffix = 'elf')
env.Append(BUILDERS = {'List' : list})

env.Program('servos', ['servos.c', 
                      '../lib/elecanisms.c']) 
env.Hex('servos')
env.List('servos')



#print('Creating builder to load hex file via bootloader...')
#
#def load_function(target, source, env):
#    bl = b.bootloadercmd()
#    bl.import_hex(source[0].rstr())
#    bl.write_device()
#    bl.bootloader.start_user()
#    bl.bootloader.close()
#    return None
#
#load = Builder(action=load_function,
#               suffix = 'none',
#               src_suffix = 'hex')
#
#env.Append(BUILDERS = {'Load' : load})


env.Hex('servos')
env.List('servos')
#env.Load('servos')
